/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.maven.app.view;

import com.mycompany.maven.app.ManagePatient;
import com.mycompany.maven.app.model.Patient;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Iterator;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.JComboBox;
import javax.swing.DefaultCellEditor;
import javax.swing.table.TableColumn;
import javax.swing.event.TableModelListener;
import javax.swing.event.TableModelEvent;
import java.time.LocalDate;
import org.jdesktop.swingx.table.DatePickerCellEditor;
import com.mycompany.maven.app.util.DateCellRenderer;
import java.util.Date;
/**
 *
 * @author mac
 */
public class PasienPanel extends javax.swing.JPanel {
    
    ManagePatient controller;

    /**
     * Creates new form PasienPanel
     */
    public PasienPanel() {
        initComponents();
        this.controller = new ManagePatient();
        getDataTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ButtonGroup = new javax.swing.JPanel();
        Refresh = new javax.swing.JButton();
        Remove = new javax.swing.JButton();
        Add = new javax.swing.JButton();
        TableWrapper = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablePasien = new javax.swing.JTable();

        setBackground(new java.awt.Color(223, 230, 233));
        setLayout(new java.awt.BorderLayout());

        ButtonGroup.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        Refresh.setText("Refresh");
        Refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshActionPerformed(evt);
            }
        });
        ButtonGroup.add(Refresh);

        Remove.setText("Hapus yang dipilih");
        Remove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RemoveMouseClicked(evt);
            }
        });
        Remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveActionPerformed(evt);
            }
        });
        ButtonGroup.add(Remove);

        Add.setText("Tambah Patient");
        Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddActionPerformed(evt);
            }
        });
        ButtonGroup.add(Add);

        add(ButtonGroup, java.awt.BorderLayout.PAGE_START);

        TableWrapper.setLayout(new java.awt.BorderLayout(5, 5));

        TablePasien.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "id", "No Pasien", "Nama", "Tgl Lahir", "Gol Darah", "Jenis Kel", "Alamat", "dibuat"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, true, true, true, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
        TablePasien.setDefaultEditor(LocalDate.class, new DatePickerCellEditor(df));
        TablePasien.getModel().addTableModelListener(new TableModelListener() {
            public void tableChanged(TableModelEvent e) {
                int firstRow = e.getFirstRow();
                int lastRow = e.getLastRow();
                int index = e.getColumn();
                switch (e.getType()) {
                    case TableModelEvent.INSERT:
                    for (int i = firstRow; i <= lastRow; i++) {
                        //                  System.out.println(i);
                    }
                    break;
                    case TableModelEvent.UPDATE:
                    if (firstRow == TableModelEvent.HEADER_ROW) {
                        if (index == TableModelEvent.ALL_COLUMNS) {
                            System.out.println("A column was added");
                        } else {
                            System.out.println(index + "in header changed");
                        }
                    } else {
                        for (int i = firstRow; i <= lastRow; i++) {
                            if (index == TableModelEvent.ALL_COLUMNS) {
                                System.out.println("All columns have changed");
                            } else {
                                //                      System.out.println("Baris-"+ i + " .Kolom-" + index);
                                updateTable(i, index);
                            }
                        }
                    }
                    break;
                    case TableModelEvent.DELETE:
                    for (int i = firstRow; i <= lastRow; i++) {
                        System.out.println(i);
                    }
                    break;
                }
            }
        });

        TableColumn column = TablePasien.getColumnModel().getColumn(3);

        DateCellRenderer renderer = new DateCellRenderer();
        column.setCellEditor(TablePasien.getDefaultEditor(LocalDate.class));
        //column.setCellRenderer(TablePasien.getDefaultRenderer(LocalDate.class));
        column.setCellRenderer(renderer);

        TableColumn bloodColumn = TablePasien.getColumnModel().getColumn(4);
        JComboBox comboBox = new JComboBox();
        comboBox.addItem("A");
        comboBox.addItem("B");
        comboBox.addItem("AB");
        comboBox.addItem("O");
        bloodColumn.setCellEditor(new DefaultCellEditor(comboBox));

        TableColumn genderColumn = TablePasien.getColumnModel().getColumn(5);

        JComboBox genderComboBox = new JComboBox();
        genderComboBox.addItem("Pria");
        genderComboBox.addItem("Wanita");
        genderColumn.setCellEditor(new DefaultCellEditor(genderComboBox));

        TablePasien.removeColumn(TablePasien.getColumnModel().getColumn(0));
        TablePasien.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablePasienMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TablePasien);

        TableWrapper.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        add(TableWrapper, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddActionPerformed
        // TODO add your handling code here:
        this.controller.openForm();
    }//GEN-LAST:event_AddActionPerformed

    private void RemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RemoveActionPerformed

    private void RemoveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RemoveMouseClicked
        // TODO add your handling code here:
        int confirm = JOptionPane.showOptionDialog(
                this,
                "Anda Yakin?",
                "Hapus",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE, 
                null,
                null,
                null
        );
        if (confirm == JOptionPane.YES_OPTION) {
            int selectedRow = TablePasien.getSelectedRow();
            DefaultTableModel pasienModel = (DefaultTableModel) TablePasien.getModel();            
            controller.delete((String) pasienModel.getValueAt(selectedRow, 0));
            pasienModel.removeRow(selectedRow);
            JOptionPane.showMessageDialog(this, "Data telah dihapus.");
        }           
    }//GEN-LAST:event_RemoveMouseClicked

    private void RefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshActionPerformed
        // TODO add your handling code here:
        refreshTable();
    }//GEN-LAST:event_RefreshActionPerformed

    private void TablePasienMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablePasienMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_TablePasienMouseClicked
    
    public void updateTable(int row, int column) {
        DefaultTableModel tm = (DefaultTableModel) TablePasien.getModel();
        String id = (String) tm.getValueAt(row, 0);  
        String patientNumber = (String) tm.getValueAt(row, 1);
        String name = (String) tm.getValueAt(row, 2);
        Date birthDate = (Date) tm.getValueAt(row, 3);
        
        System.out.println(tm.getValueAt(row, 3).getClass().getSimpleName() + ": " + tm.getValueAt(row, 3));
        
//        if (tm.getValueAt(row, 3).getClass().getSimpleName() == "String") {
//            System.out.println("birth date: " + tm.getValueAt(row, 3));
//            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MMM dd, yyyy");
//            birthDate = LocalDate.parse((String) tm.getValueAt(row, 3), formatter);
//        } else {
//            System.out.println("date: " + tm.getValueAt(row, 3));
//            birthDate = (LocalDate) tm.getValueAt(row, 3);
//        }
//        ZoneId systemTimeZone = ZoneId.systemDefault();
//        ZonedDateTime zonedDateTime = birthDate.atStartOfDay(systemTimeZone);
//        Date utilDate = Date.from(zonedDateTime.toInstant());
        
        String bloodType = (String) tm.getValueAt(row, 4);
        String gender = (String) tm.getValueAt(row, 5);
        String address = (String) tm.getValueAt(row, 6);
        Patient updated = new Patient(patientNumber, name, birthDate, bloodType, gender, address);
        updated.setId(id);
        this.controller.update(updated);
    }
    
    public void getDataTable() {
        DefaultTableModel tm = (DefaultTableModel) TablePasien.getModel();
        tm.setRowCount(0);
        try {
            ManagePatient mp = new ManagePatient();
//            DateFormat df = new SimpleDateFormat("MMM dd, yyyy");
            for (Iterator iterator = mp.getAllPatients().iterator(); iterator.hasNext();) {
                Patient next = (Patient) iterator.next();
                Object o[] = {
                    next.getId(),
                    next.getPatientNumber(),
                    next.getName(),
//                    df.format(next.getBirthDate()),
                    next.getBirthDate(),
                    next.getBloodType(),
                    next.getGender(),
                    next.getAddress(),
                    next.getCreatedAt()
                };
                tm.addRow(o);
            }    
        } catch (Exception e) {
            System.err.println("gakbener");
            System.err.print(e);
        }   
    }
    
    public void refreshTable() {
        DefaultTableModel tm = (DefaultTableModel) TablePasien.getModel();
        getDataTable();
        tm.fireTableDataChanged();
        TablePasien.repaint();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add;
    private javax.swing.JPanel ButtonGroup;
    private javax.swing.JButton Refresh;
    private javax.swing.JButton Remove;
    private javax.swing.JTable TablePasien;
    private javax.swing.JPanel TableWrapper;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
